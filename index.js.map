{"version":3,"sources":["index.es6"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Created by dbreuer83 on 13/11/15.\n */\n\n//packages\nimport through from 'through2';\nimport _ from 'lodash';\nimport gutil from 'gulp-util';\nimport fs from \"fs\";\n\n// Consts\n\nconst NEW_LINE = /\\n\\r?/;\nconst PLUGIN_NAME = 'gulp-create-test-files';\n\nlet PluginError = gutil.PluginError;\n\n\nclass gulpTests {\n    constructor(opts = []) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        opts = {\n            'src': options.src || './src/',\n            'dist': options.dist || './dist/',\n            'temp': options.temp || 'templates/',\n            'testFileSuffix': options.testFileSuffix || '.spec.js',\n            'projectPrefix': options.projectPrefix || 'project'\n        };\n\n        if (!opts) {\n            throw new PluginError(PLUGIN_NAME, 'Missing options object!');\n        }\n        if (!opts.testFileSuffix) {\n            throw new PluginError(PLUGIN_NAME, 'Missing prefix text!');\n        }\n        init();\n    }\n\n    init() {\n        return through.obj( fileObjectFunction );\n    }\n\n\n    truncateJsSuffix(name) {\n        return name.replace(/.js$/i, '');\n    };\n\n    capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    };\n\n    dasherize( string ) {\n        return string.replace( /([^])([A-Z]+)([^$])/g, '$1-$2$3' ).toLowerCase();\n    };\n\n    fileSplitFunction(line, lineNumber){\n        lineNumber++;\n        // is the comment starting?\n        if (!inDoc && (match = line.match(/^\\s*\\/\\*\\*\\s*(.*)$/))) {\n            line = match[1];\n            inDoc = true;\n            text = [];\n            startingLine = lineNumber;\n        }\n        // are we done?\n        if (inDoc && line.match(/\\*\\//)) {\n            text = text.join('\\n');\n            text = text.replace(/^\\n/, '');\n            if (text.match(/@ngtest/)){\n                console.log(file, startingLine)\n                docs.push(text, file, startingLine, options);\n            }\n            doc = null;\n            inDoc = false;\n        }\n        // is the comment add text\n        if (inDoc){\n            text.push(line.replace(/^\\s*\\*\\s?/, ''));\n        }\n    }\n\n    fileObjectFunction(file, enc, cb) {\n\n        //options.testFileSuffix = new Buffer(options.testFileSuffix);\n\n\n        if (file.isNull()) {\n            return cb(null, file);\n        }\n        if (file.isStream()) {\n            this.emit('error', new PluginError(PLUGIN_NAME, 'Streams are not supported!'));\n            return cb();\n        }\n        if (file.isBuffer()) {\n\n            if (fs.existsSync(file.path.replace('.js', '.spec.js'))) {\n                gutil.log('Skipped:', 'spec file exists ', gutil.colors.green(\"File not created\"));\n                return cb();\n            }\n\n            if(file.path.indexOf('min.js') > -1) {\n                gutil.log('Skipped:','minified' , gutil.colors.green(\"File not created\"));\n                return cb();\n            }\n\n            if(file.path.indexOf('test.js') > -1) {\n                gutil.log('Skipped:','test file' , gutil.colors.green(\"File not created\"));\n                return cb();\n            }\n\n            if(file.path.indexOf('build.js') > -1) {\n                gutil.log('Skipped:','Build file' , gutil.colors.green(\"File not created\"));\n                return cb();\n            }\n\n            if(file.path.indexOf('bower_components') > -1) {\n                gutil.log('Skipped:','bower file' , gutil.colors.green(\"File not created\"));\n                return cb();\n            }\n\n            gutil.log(gutil.colors.green(file.path));\n\n\n            // Comments match regexp\n            // patternForComments= /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg\n            /**\n             * module type regex\n             * @type {RegExp}\n             */\n\n            var typeTestCtrl = /\\.(controller|service|factory|config|run|directive)[\\(\\']'(.*)'/g;\n            var typeTestModule = /\\.(module)[\\(\\']'(.*)'/g;\n            var typeModuleDependency = /(\\[[\\s\\S]*?\\])\\)/g;\n            var patternForComments = /^\\s*\\/\\*\\*\\s*(.*)$/g;\n            var match = typeTestCtrl.exec(String(file.contents));\n            var modulematch = typeTestModule.exec(String(file.contents));\n            var dep = typeModuleDependency.exec(String(file.contents));\n            var comments = patternForComments.exec(String(file.contents));\n\n            var docs = [];\n            var text;\n            var startingLine ;\n            var match;\n            var inDoc = false;\n\n            String(file.contents).split(NEW_LINE).forEach( fileSplitFunction );\n\n            console.log(text);\n\n\n            var opt = {\n                date: new Date(),\n                type: null,\n                typeName: null,\n                module: options.projectPrefix + '.' + truncateJsSuffix(_(file.path.split('/')).last()),\n                dependency: null,\n                directiveName: null,\n                path: file.path,\n                filename: _(file.path.split('/')).last(),\n                amdPath: 'namm',\n                name: truncateJsSuffix(_(file.path.split('/')).last()),\n                capitalizedName: capitalize(truncateJsSuffix(_(file.path.split('/')).last()))\n            };\n            if (match) {\n                opt.type = match[1];\n                opt.typeName = match[2];\n            }\n            if (dep) {\n                dep = dep[1].replace(\"[\", \"\");\n                dep = dep.replace(\"]\", \"\");\n                dep = dep.split(',');\n                opt.dependency = dep;\n            }\n            if (opt.type === null && modulematch) {\n                opt.module = modulematch[2]\n            }\n            if (opt.type === 'directive') {\n                opt.directiveName = dasherize(opt.typeName);\n            }\n\n            var templateFile = (opt.type!==null)?'angular.'+opt.type+'.temp':'angular.module.temp';\n            var fileContent=String(fs.readFileSync(__dirname+\"/templates/\"+templateFile, \"utf8\"));\n\n            var compiled = _.template(fileContent);\n\n            file.contents = new Buffer(compiled(opt));\n\n            file.path = gutil.replaceExtension(file.path, '.spec.js'); // file.js\n            gutil.log('Created test files: ', gutil.colors.green(_(file.path.split('/')).last()));\n        }\n\n        cb(null);\n\n    }\n\n    // Creating a stream through which each file will pass\n\n};\n\nconst out = new gulpTests();\n\nmodule.exports = out;"]}